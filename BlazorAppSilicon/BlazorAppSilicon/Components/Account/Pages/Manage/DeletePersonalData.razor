@* @using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorAppSilicon.Data

@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>


<StatusMessage Message="@message" />

<h5 class="colorTitle">Delete Account</h5>

<div class="text-m" role="alert">
    <p>
        <strong>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="Input.ConfirmDelete" class="form-check-input" id="confirmDelete" />
            <label for="confirmDelete" class="form-check-label">Yes, I want to delete my account.</label>
            <ValidationMessage For="() => Input.ConfirmDelete" class="text-danger" />
        </div>

        <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
    </EditForm>
</div>

@code {
    private string? message;

    [CascadingParameter]
    private ApplicationUser user { get; set; } = null!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
    }

    private async Task OnValidSubmitAsync()
    {
        if (!Input.ConfirmDelete)
        {
            message = "Error: You must confirm account deletion.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        public bool ConfirmDelete { get; set; } = false;
    }
}
 *@

@* <div>
    <h5 class="colorTitle">Delete Account</h5>
    <p class="text-m">When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>
    <EditForm Model="deleteAccountModel" OnValidSubmit="DeleteAccountAsync" FormName="DeleteAccountForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        <div class="securityCheck">
            @if (requirePassword)
            {
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="deleteAccountModel.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="@(() => deleteAccountModel.Password)" class="text-danger" />
                </div>
            }
            <input type="checkbox" id="agreeCheckbox" @bind="agreeCheckbox">
            <label for="agreeCheckbox">I agree to the <a href="#">Terms</a> & <a href="#">Conditions</a></label>
            <button type="submit" class="btn-delete" disabled="@(!agreeCheckbox)">Delete</button>
        </div>
    </EditForm>
</div> *@