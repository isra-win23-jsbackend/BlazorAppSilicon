@page "/account/details"
@using System.ComponentModel.DataAnnotations
@using BlazorAppSilicon.Components.Account
@using BlazorAppSilicon.Data
@using BlazorAppSilicon.Data.Entities


<PageTitle>Profile</PageTitle>

<div class="details container">
    <div class="profile">
        <ManageNavMenu />
    </div>
    <div class="infoDetails">

        <BlazorAppSilicon.Components.Account.Pages.Manage.Index />
      
    <hr />
    <EditForm Model="@addressModel">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h5 class="colorTitle">Address</h5>
        
             <div class="addresCity">
                <label><b>Address line 1</b></label>
                <InputText @bind-Value="addressModel.Address1" placeholder="Enter your address line" />
                <ValidationMessage For="@(() => addressModel.Address1)" />
             </div>


            <div class="class="addresCity">
                <label><b>Address line 2</b> (optional)</label>
                <InputText @bind-Value="addressModel.Address2" placeholder="Enter your address line" />
                <ValidationMessage For="@(() => addressModel.Address2)" />
            </div>
       

        <div class="postalcode">
            <div class="addresCity">
                <label><b>Postal Code</b></label>
                <InputText @bind-Value="addressModel.PostalCode" placeholder="Enter your postal code" />
                <ValidationMessage For="@(() => addressModel.PostalCode)" />
            </div>
            <div class="addressCity">
                <label><b>City</b></label>
                <InputText @bind-Value="addressModel.City" placeholder="Enter your city" />
                <ValidationMessage For="@(() => addressModel.City)" />
            </div>
        </div>
        <div class="acountbutton">
            <button id="btn-address-reset" type="reset" class="btn-gray">Cancel</button>
            <button id="btn-address-submit" type="submit" class="btn-theme">Save Changes</button>
        </div>
    </EditForm>
    </div>
</div>

@code {
    private AddressModel addressModel = new AddressModel();
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        if (user.Address != null)
        {
            addressModel = new AddressModel
                {
                    Address1 = user.Address.AddressLine_1,
                    Address2 = user.Address.AddressLine_2?? "",
                    PostalCode = user.Address.PostalCode,
                    City = user.Address.City
                };
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (user.Address == null)
        {
            user.Address = new AddressEntity();
        }

        user.Address.AddressLine_1 = addressModel.Address1;
        user.Address.AddressLine_2 = addressModel.Address2;
        user.Address.PostalCode = addressModel.PostalCode;
        user.Address.City = addressModel.City;

        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update address.", HttpContext);
            return;
        }

        RedirectManager.RedirectToCurrentPageWithStatus("Your address has been updated", HttpContext);
    }

    public class AddressModel
    {
        [Required]
        public string Address1 { get; set; } = null!;
        public string Address2 { get; set; } = "";
        [Required]
        public string PostalCode { get; set; } = null!;
        [Required]
        public string City { get; set; } = null!;
    }
}

