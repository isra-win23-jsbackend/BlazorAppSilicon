@* @page "/courses"

@attribute [StreamRendering]
@attribute [Authorize]
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>Courses</PageTitle>

<section class="coursesList">
    <div class="container">
        <div class="homeIcon">
            <img src="/Images/homeIcon.svg" alt="Home">
            <h4 class="h6gray">Home</h4>
            <img src="/Images/rightArrow.svg" alt="Right Arrow">
            <h4 class="blue">Courses</h4>
        </div>
        <div class="courses">
            <h1>Courses</h1>

            <form class="filters">
                <div class="select">
                    <div class="selected">All Categories</div>
                    <div class="select-options">
                        <select class="option" data-value="all">All Categories</select>
                    </div>
                    <div class="input-search-group">
                        <input id="searchQuery" name="searchQuery" type="text" placeholder="Search courses">
                        <i class="fa-regular fa-search"></i>
                    </div>
                </div>
            </form>
        </div>

        <div class="items">
            @if (courses == null)
            {
                <p><em>No Course found yet. Please wait...</em></p>
            }
            else
            {
                @foreach (var item in courses)
                {
                    <div class="cardCourses">
                        @if (item.IsBestSeller)
                        {
                            <img class="bestSeller" src="/Images/badge.png" alt="Best Seller">
                        }

                        <img class="cardImage" src="/Images/@item.ImageName" alt="@item.Title">

                        <form method="post">
                            <input type="hidden" name="courseId" value="@item.Id" />
                            <button class="courseIcon" type="submit"><img src="/Images/S.svg" alt="Save"></button>
                        </form>

                        <div class="cardText">
                            <a href="">
                                <h5>@item.Title</h5>
                            </a>
                            <p class="text-s">@item.Author</p>
                            @if (item.Discount > 0)
                            {
                                <span class="red">$@item.Price</span>
                                <span class="gray">$@item.Discount</span>
                            }
                            else
                            {
                                <span class="blue">$@item.Price</span>
                            }
                            <hr />
                            <div class="watch">
                                <div class="hours">
                                    <p class="text-s"><i class="fa-regular fa-clock"></i> @item.Hours hours</p>
                                </div>
                                <div class="likes">
                                    <img src="/Images/like.svg" alt="Likes">
                                    <span>@item.LikesNumbers %</span>
                                    <span class="text-s">(@item.LikesProcent k)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {

    private List<CourseModel>? courses;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {


            var query = new GraphQLQuery { Query = "{ getAllCourses { id title authors { name } imageUri price discount hours isBestSeller likes likesInProcent category } }" };
            Console.WriteLine("Enviando solicitud HTTP a: http://localhost:7047/api/playground");

            var response = await Http.PostAsJsonAsync("http://localhost:7047/api/playground", query);
            Console.WriteLine($"Respuesta recibida del servidor: {courses}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<DynamicGraphQlResponse>();
                courses = result?.Data.GetProperty("getAllCourses").EnumerateArray()
                    .Select(course => new CourseModel
                        {
                            Id = course.GetProperty("id").GetString()!,
                            Title = course.GetProperty("title").GetString()!,
                            Author = course.GetProperty("authors")[0].GetProperty("name").GetString(),
                            ImageName = course.GetProperty("imageUri").GetString(),
                            Price = course.GetProperty("price").GetDecimal(),
                            Discount = course.GetProperty("discount").GetDecimal(),
                            Hours = course.GetProperty("hours").GetInt32(),
                            IsBestSeller = course.GetProperty("isBestSeller").GetBoolean(),
                            LikesNumbers = course.GetProperty("likes").GetInt32().ToString(),
                            LikesProcent = course.GetProperty("likesInProcent").GetString(),
                            Category = course.GetProperty("category").GetString()!
                        }).ToList();
            }
            else
            {
                Console.WriteLine($"La solicitud HTTP no fue exitosa. Código de estado: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Se produjo un error al enviar la solicitud HTTP: {ex.Message}");
        }
    }

    public class CourseModel
    {
        public string Id { get; set; } = null!;
        public string Title { get; set; } = null!;
        public string? Author { get; set; }
        public string? ImageName { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
        public int Hours { get; set; }
        public bool IsBestSeller { get; set; }
        public string? LikesNumbers { get; set; }
        public string? LikesProcent { get; set; }
        public string Category { get; set; } = null!;
    }

    private class GraphQLQuery
    {
        public string Query { get; set; } = null!;
    }

    private class DynamicGraphQlResponse
    {
        public JsonElement Data { get; set; }
    }
}


}
  *@














@page "/courses"

@attribute [StreamRendering]
@attribute [Authorize]


<PageTitle>Courses</PageTitle>

<section class="coursesList">
    <div class="container">
        <div class="homeIcon">
            <img src="/Images/homeIcon.svg" alt="Home">
            <h4 class="h6gray">Home</h4>
            <img src="/Images/rightArrow.svg" alt="Right Arrow">
            <h4 class="blue">Courses</h4>
        </div>
        <div class="courses">
            <h1>Courses</h1>

            <form class="filters">
                <div class="select">
                    <div class="selected">All Categories</div>
                    <div class="select-options">
                        <select class="option" data-value="all">All Categories</select>
                    </div>
                    <div class="input-search-group">
                        <input id="searchQuery" name="searchQuery" type="text" placeholder="Search courses">
                        <i class="fa-regular fa-search"></i>
                    </div>
                </div>
            </form>
        </div>

        <div class="items">
            @if (courses == null)
            {
                <p><em>No Course found yet. Please wait...</em></p>
            }
            else
            {
                @foreach (var item in courses)
                {
                    <div class="cardCourses">
                        @if (item.IsBestSeller)
                        {
                            <img class="bestSeller" src="/Images/badge.png" alt="Best Seller">
                        }

                        <img class="cardImage" src="/Images/@item.ImageName" alt="@item.Title">

                        <form method="post">
                            <input type="hidden" name="courseId" value="@item.Id" />
                            <button class="courseIcon" type="submit"><img src="/Images/S.svg" alt="Save"></button>
                        </form>

                        <div class="cardText">
                            <a href="">
                                <h5>@item.Title</h5>
                            </a>
                            <p class="text-s">@item.Author</p>
                            @if (item.Discount > 0)
                            {
                                <span class="red">$@item.Price</span>
                                <span class="gray">$@item.Discount</span>
                            }
                            else
                            {
                                <span class="blue">$@item.Price</span>
                            }
                            <hr />
                            <div class="watch">
                                <div class="hours">
                                    <p class="text-s"><i class="fa-regular fa-clock"></i> @item.Hours hours</p>
                                </div>
                                <div class="likes">
                                    <img src="/Images/like.svg" alt="Likes">
                                    <span>@item.LikesNumbers %</span>
                                    <span class="text-s">(@item.LikesProcent k)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {

    private CourseModel[]? courses;
    private string errorMessage = "";

     protected override async Task OnInitializedAsync()
   {
        try
        {
            Console.WriteLine("Enviando solicitud HTTP a: https://www.google.com");

            var response = await Http.GetAsync("https://www.google.com");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Contenido de la página: {content}");
            }
            else
            {
                Console.WriteLine($"La solicitud HTTP no fue exitosa. Código de estado: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Se produjo un error al enviar la solicitud HTTP: {ex.Message}");
        }

    }
    private class CourseModel
    {
        public string Id { get; set; } = null!;
        public string Title { get; set; } = null!;
        public string? Author { get; set; }
        public string? ImageName { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
        public int Hours { get; set; }
        public bool IsBestSeller { get; set; }
        public string? LikesNumbers { get; set; }
        public string? LikesProcent { get; set; }
        public string Category { get; set; } = null!;
    } 
} 
 

