@page "/Account/Manage/Security"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorAppSilicon.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Security> Logger

<PageTitle>Security</PageTitle>

<div class="container details">
    <ManageNavMenu />

    <div class="infoDetails">
        <h1>Security</h1>

        <div class="createNewSecurity">
            <h5 class="colorTitle">Change Password</h5>
            <CascadingValue Value="@UserAccessor">
                <EditForm Model="changePasswordInput" OnValidSubmit="OnChangePasswordValidSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    <div class="clienSecurity">
                        <div class="oldPassword">
                            <InputText type="password" @bind-Value="changePasswordInput.OldPassword" class="input" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                            <label for="old-password" class="form-label">Current Password</label>
                            <ValidationMessage For="@(() => changePasswordInput.OldPassword)" class="text-danger" />
                        </div>
                    </div>
                    <div class="clientInfo">
                        <div class="clienSecurity">
                            <InputText type="password" @bind-Value="changePasswordInput.NewPassword" class="input" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                            <label for="new-password" class="form-label">New password</label>
                            <ValidationMessage For="@(() => changePasswordInput.NewPassword)" class="text-danger" />
                        </div>
                        <div class="clienSecurity">
                            <InputText type="password" @bind-Value="changePasswordInput.ConfirmPassword" class="input" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                            <label for="confirm-password" class="form-label">Confirm New Password</label>
                            <ValidationMessage For="@(() => changePasswordInput.ConfirmPassword)" class="text-danger" />
                        </div>
                    </div>
                    <button type="submit" class="btn-theme">Save Changes</button>
                </EditForm>
            </CascadingValue>
        </div>

        <hr>

        <h5 class="colorTitle">Delete Account</h5>
        <div class="text-m" role="alert">
            <p>
                <strong>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</strong>
            </p>
        </div>
        <EditForm Model="deleteInput" FormName="delete-user" OnValidSubmit="OnValidDeleteSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="deleteInput.ConfirmDelete" class="form-check-input" id="confirmDelete" />
                <label for="confirmDelete" class="form-check-label">Yes, I want to delete my account.</label>
                <ValidationMessage For="() => deleteInput.ConfirmDelete" class="text-danger" />
            </div>

            <button class="w-100 btn btn-lg btn-danger" type="submit">Delete data and close my account</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = new ApplicationUser();
    private bool hasPassword;
    private ChangePasswordInputModel changePasswordInput = new ChangePasswordInputModel();
    private DeleteInputModel deleteInput = new DeleteInputModel();
    private string? deleteMessage;

    [CascadingParameter]
    private HttpContext _http { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(_http);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnChangePasswordValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, changePasswordInput.OldPassword, changePasswordInput.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            // Handle password change failure
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");
        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", _http);
    }

    private async Task OnValidDeleteSubmitAsync()
    {
        if (!deleteInput.ConfirmDelete)
        {
            deleteMessage = "Error: You must confirm account deletion.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    public class ChangePasswordInputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    public class DeleteInputModel
    {
        public bool ConfirmDelete { get; set; } = false;
    }
}





@* @page "/Account/Manage/Security"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager


@inject ILogger<Security> Logger

<PageTitle>Security</PageTitle>



<div class="container details">
    <ManageNavMenu />

    <div class="infoDetails">
        <h1>Security</h1>

        <div class="createNewSecurity">
            <h5 class="colorTitle">Change Password</h5>
            <CascadingValue Value="@UserAccessor">
                <BlazorAppSilicon.Components.Account.Pages.Manage.ChangePassword />
            </CascadingValue>
            
        </div>

        <hr>     
                 
         <BlazorAppSilicon.Components.Account.Pages.Manage.DeletePersonalData />
        
           
       
    </div>
</div>


@code{
  
} *@